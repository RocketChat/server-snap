#! /bin/bash

declare -rA ARCH=([amd64]="x86_64" [arm64]="aarch64")

export PATH="$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/lib/${ARCH[$SNAP_ARCH]}-linux-gnu:$SNAP/usr/lib/${ARCH[$SNAP_ARCH]}-linux-gnu"
export LD_LIBRARY_PATH="$SNAP_LIBRARY_PATH:$LD_LIBRARY_PATH"

error() {
  printf "[ERROR] %s\n" "$*" >&2
  exit 1
}

validate_domain() {
  local siteurl=$(snap get siteurl)
  [[ $siteurl =~ ^https?://[a-zA-Z0-9\.]+[a-zA-Z0-9]$ ]] || error "\"$siteurl\" is not a valid url"
  if [[ $siteurl =~ ^https:// ]]; then
    if [[ $(dig +short A $siteurl) != $(curl ipinfo.io/ip 2>/dev/null) ]]; then
      error "your public ip doesn't match the one resolved for siteurl"
    fi
  fi
}

validate_port() {
  local port=$(snapctl get port)
  [[ $port =~ ^[0-9]+$ ]] || error "\"$port\" not a valid number"
  (( $port > 1024 )) && (( $port <= 65536 )) || error "port number ($port) not in unreserved srange"
}

_validate_mongo_url() {
  # $1 - root connection uri
  # $2 - database name
  local protocol="^mongodb(\+srv)?://"
  local authentication="((.+):(.+)@)?"
  local host="[a-zA-Z0-9\.]+[a-zA-Z0-9]"
  local port="(:[0-9]+)?"
  local database="/${2:-.+}$"
  [[ $1 =~ ${protocol}${authentication}${host}${port}${database} ]] || error "illegal mongo connection string"
}

validate_mongo_rocketchat_url() {
  _validate_mongo_url $(snapctl get mongo-url)
}

validate_mongo_oplog_url() {
  _validate_mongo_url $(snapctl get mongo-oplog-url) local
}

validate_backup_on_refresh() {
  [[ $(snapctl get backup-on-refresh) =~ ^(enable)|(disable)$ ]] || error "value must be either \"enable\" or \"disable\""
}

main() {
  validate_port
  validate_mongo_rocketchat_url
  validate_mongo_oplog_url
  validate_backup_on_refresh
}

main
